--- APP --- 

 // const [modifytask, setModifytask] = useState();
  // const [modifycomplete, setModifycomplete] = useState();

  // const updateTask = (id) => {
  //   axios
  //     .put("http://localhost:8000/todo/" + id)
  //     .then(() => {
  //       console.log("update successful");
  //     })
  //     .catch((e) => console.log(e));
  // };

  // const completeTask = (id) => {
  //   axios
  //     .put("http://localhost:8000/todo/" + id)
  //     .then(() => {
  //       console.log("update successful");
  //     })
  //     .catch((e) => console.log(e));
  // };


  /* 

 // const deleteTask = (id) => {
  //   setTasks(
  //     axios
  //       .delete("http://localhost:8000/todo/" + id)
  //       .then(() => {
  //         console.log("delete successful");
  //       })
  //       .catch((e) => console.log(e))
  //   );
  // };
  //  = > fonctionne pas du tout

 // axios
    //   .get("http://localhost:8000/todo")
    //   .then(({ data }) => {
    //     console.log("DATA FROM DB : " + data);
    //     setTasks(data);
    //   })
    //   .catch((e) => console.log(e));
    // => NON

useEffect(()=>{
  fetch("http://localhost:8000/todo")
  .then(res=>{
    return res.json()
  })
  .then(data =>{
    setTasks(data);
  })
},[])


fetchTaskes()
 const fetchTasks = async () => {
    try {
      const res = await axios.get("http://localhost:8000/todo");
      console.log("api res => ", res);
      setTasks(res.data);
    } catch (err) {
      console.error(err);
    }
  };

*/


--- TODO ---

- - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - -


// ----- CONFIRM DELETE BOX -----
// import { confirmAlert } from "react-confirm-alert"; TRY 1
// import { confirm } from "react-confirm-box"; // TRY 2

  // ---- TRY 1 : ----
  // const submit = () => {
  //   confirmAlert({
  //     title: "Confirm to submit",
  //     message: "Are you sure to do this ?",
  //     buttons: [
  //       {
  //         label: "Yes",
  //         onClick: () => deleteTask(id)
  //       },
  //       {
  //         label: "No",
  //         onClick: () => console.log("cancel delete box")
  //       },
  //     ],
  //   });
  // };

  // ---- TEST 2 ----
  // const optionsWithLabelChange = {
  //   closeOnOverlayClick: false,
  //   labels: {
  //     confirmable: "Confirm",
  //     cancellable: "Cancel",
  //   },
  // };

  // const optionsWithClonOnOverlayclick = {
  //   closeOnOverlayClick: true
  // };

  // const customRender = {
  //   render: (message, onConfirm, onCancel) => {
  //     return (
  //       <>
  //         <h1> Replace with {message} </h1>
  //         <button onClick={onConfirm}> Yes </button>
  //       </>
  //     );
  //   },
  // };

  // const onClick = async (options) => {
  //   const result = await confirm("Are you sure?", options);
  //   if (result) {
  //     console.log("You click yes!");
  //     return;
  //   }
  //   console.log("You click No!");
  // };

  // ---- TEST 3 ----

  // const testConfirm = () => {
  //   console.log("Ã§a fonctionne");
  // };

  // onClick={() => { window.confirm( 'Are you sure you want to delete this Card?', ) && deleteTask(id) }}


  {/* <button onClick={() => deleteTask(id)}>ðŸ—‘</button> */}

      {/* <button onClick={() => submit()}>Confirm box</button> */}
      {/* ! Don't forget () to invok the function  */}

      {/* 
      --- TEST 2 -- 
      <div>
        <button
          onClick={() => {
            onClick(optionsWithLabelChange);
          }}
        >
          Click
        </button>
      </div> */}

// TEST 2 Warning: ReactDOM.render is no longer supported in React 18.
//Use createRoot instead. Until you switch to the new API,
//your app will behave as if it's running React 17.


- - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - -
//   /* <button onClick={() => updateTask(id)}>modify</button> */

// { task, complete, id, deleteTask, updateTask }

//   <div className={complete ? " post-it strike" : "post-it"} key={id}>
//       <p>{task}</p>
//       <button onClick={() => updateTask(id)}>modify</button>
//       //<button onClick={() => updateTask(task.id)}>complete</button>
//       <button onClick={() => deleteTask(id)}>delete</button>
//     </div>

//     compo pr chaque tache, dans state, un boolean qui dit si on modif et en fonction afficher
//   rendu contiontionel dans return ternary
//   moyen de detecter si on a cliquier si oui afficher un input, sinon parag
//   garder en memoire dans un state si modfifier ou non
//   qd fini de modifier, repasser Ã  un paragraphe
//   mettre un on click sur compo entier ?

//   return (
//     <div
//       className={task.complete ? " post-it strike" : "post-it"}
//       key={task.id}
//     >
//       <p>{task.task}</p>
//       <button onClick={() => updateTask(task.id)}>modify</button>
//       // <button onClick={() => updateTask(task.id)}>complete</button>
//       <button onClick={() => deleteTask(task.id)}>delete</button>
//     </div>
//   );

-------------------------------------------------------
--- TODOLIST --- 

 {/* // <button onClick={() => updateTask(task.id)}>complete</button>  */}

//  <Todo
//               task = {task.task}
//               complete ={task.complete}
//               id = {task.id}

//               tasks={tasks}
//               deleteTask={deleteTask}
//               updateTask={updateTask}
//             /> 


//       <li
//               className={task.complete ? " post-it strike" : "post-it"}
//               key={task.id}
//               style={{
//                 listStyleType: "none",
//               }}
//             >
              
//             compo pr chaque tache, dans state, un boolean qui dit si on mofi et ne fonction afficher 
//             rendu contiontionel dans return ternary 
//             moyen de detecter si on a cliquier si oui affciher un input, sinon para
//             garder en memoire dans un state si modfifier ou non
//             qd fini de modifier, repasser Ã  un paragraphe 
//             mettre un on click sur compo entier ? 

//             <p>{task.task}</p>
//             <button onClick={() => updateTask(task.id)}>modify</button>
//           // <button onClick={() => updateTask(task.id)}>complete</button> 
//             <button onClick={() => deleteTask(task.id)}>delete</button>
//       </li>

//   const handleDelete = 
//   async (task.id)=> {
//     await axios.delete("http://localhost:8000/todo/{task.id}");
//   }

//   axios. delete("http://localhost:8000/todo/{task.id}")
//   .then(()=> console.log("delete successful"))
//   .catch((e)=> console.log(e))

// Sans request :
//  const deleteContact = (email) => {
//     setContacts(contacts.filter((contact) => contact.email !== email));
//   };

//   deleteTask(task.id){
//     axios
//       .delete("http://localhost:8000/todo/{task.id}")
//       .then(()=> console.log("delete successful"))
//       .catch((e)=> console.log(e))
//   } 


-------------------------------------------------------
Todo.jsx

Modification de la tache en cliquant sur le texte dans 
le post it pour faire apparaÃ®te le textarera
-> Ancienne version avec un icon en form de crayon 
pour faire apparaÃ®te le textarera, puis modifier   :

 {/* 
Previous one :
          // DISPLAY task and if 'complete' is true => strike
          <p className={complete ? "strike" : ""}> {task}</p>
        )}
      </div>

      <div className="container-buttons-todo">
        <button // Icon pencil. Trigger textarea (to modify the task).
          className="buttons-todo button-modify-task"
          onClick={() => setIsClicked(!isClicked)} // GARDER QUE Ã‡A
        >
          <span className="icon-post-it">
            <i className="fa-solid fa-pencil"></i>
          </span>
        </button>
         */}

-------------------------------------------------------
 


